Parameters:
  StackName:
    Type: String
    Default: ${self:service}-unique 
    Description: The unique name of the service that you are creating.

  ImageUrl:
    Type: String
    Default: labs-starter-ecs
    Description: The url of a docker image that contains the application process that
                  will handle the traffic for this service
  TaskCpu:
    Type: Number
    Default: 1024
    Description: How much CPU to give the task. 1024 is 1 CPU

  TaskMemory:
    Type: Number
    Default: 2048
    Description: How much memory in megabytes to give the task

  apiPort:
    Type: Number
    Default: 8000
    Description: What port number to use for accessing api service

Resources:
  # ECS Resources
  ECSCluster:
    Type: AWS::ECS::Cluster
  
  # A security group for the containers we will run in Fargate.
  # Two rules, allowing network traffic from a public facing load
  # balancer and from other members of the security group.
  #
  # Remove any of the following ingress rules that are not needed.
  # If you want to make direct requests to a container using its
  # public IP address you'll need to add a security group rule
  # to allow traffic from all IP addresses.
  FargateContainerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref 'VPC'
      GroupName: !Join [':', [!Ref 'AWS::StackName', 'fargate-sg']]
      GroupDescription: Access to the Fargate containers
  
  PublicLoadBalancerSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref 'VPC'
      GroupName: !Join [':', [!Ref 'AWS::StackName', 'load-balancer-sg']]
      GroupDescription: Access to the public facing load balancer
      SecurityGroupIngress:
        # Allow access to ALB from anywhere on the internet
        - CidrIp: 0.0.0.0/0
          IpProtocol: -1

  EcsSecurityGroupIngressFromPublicALB:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Ingress from the public ALB
      GroupId: !Ref 'FargateContainerSecurityGroup'
      IpProtocol: -1
      SourceSecurityGroupId: !Ref 'PublicLoadBalancerSG'

  EcsSecurityGroupIngressFromSelf:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Ingress from other containers in the same security group
      GroupId: !Ref 'FargateContainerSecurityGroup'
      IpProtocol: -1
      SourceSecurityGroupId: !Ref 'FargateContainerSecurityGroup'

  # Load balancers for getting traffic to containers.
  # This sample template creates one load balancer:
  #
  # - One public load balancer, hosted in public subnets that is accessible
  #   to the public, and is intended to route traffic to one or more public
  #   facing services.

  # A public facing load balancer, this is used for accepting traffic from the public
  # internet and directing it to public facing microservices
  PublicLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Ref 'AWS::StackName'
      Scheme: internet-facing
      LoadBalancerAttributes:
        - Key: idle_timeout.timeout_seconds
          Value: '30'
      Subnets:
        # The load balancer is placed into the public subnets, so that traffic
        # from the internet can reach the load balancer directly via the internet gateway
        - !Ref PublicSubnetOne
        - !Ref PublicSubnetTwo
      SecurityGroups: [!Ref 'PublicLoadBalancerSG']

  PublicLoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    DependsOn:
      - PublicLoadBalancer
    Properties:
      DefaultActions:
        - TargetGroupArn: !Ref 'TargetGroupAPI'
          Type: 'forward'
      LoadBalancerArn: !Ref 'PublicLoadBalancer'
      Port: 8000
      Protocol: HTTP

  ### Routing load balancer to services
  # API
  TargetGroupAPI:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 6
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      TargetType: ip
      Name: !Join ['-', [!Ref 'AWS::StackName', 'api-tg']]
      Port: 8000
      Matcher:
        HttpCode: 400
      Protocol: HTTP
      UnhealthyThresholdCount: 2
      VpcId: !Ref VPC

  LoadBalancerRuleAPI:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - TargetGroupArn: !Ref 'TargetGroupAPI'
          Type: 'forward'
      Conditions:
        - Field: path-pattern
          Values:
            - /graphql
      ListenerArn: !Ref 'PublicLoadBalancerListener'
      Priority: 2

  # This is an IAM role which authorizes ECS to manage resources on your
  # account on your behalf, such as updating your load balancer with the
  # details of where your containers are, so that traffic can reach your
  # containers.
  ECSRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: [ecs.amazonaws.com]
            Action: ['sts:AssumeRole']
      Path: /
      Policies:
        - PolicyName: ecs-service
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  # Rules which allow ECS to attach network interfaces to instances
                  # on your behalf in order for awsvpc networking mode to work right
                  - 'ec2:AttachNetworkInterface'
                  - 'ec2:CreateNetworkInterface'
                  - 'ec2:CreateNetworkInterfacePermission'
                  - 'ec2:DeleteNetworkInterface'
                  - 'ec2:DeleteNetworkInterfacePermission'
                  - 'ec2:Describe*'
                  - 'ec2:DetachNetworkInterface'

                  # Rules which allow ECS to update load balancers on your behalf
                  # with the information sabout how to send traffic to your containers
                  - 'elasticloadbalancing:DeregisterInstancesFromLoadBalancer'
                  - 'elasticloadbalancing:DeregisterTargets'
                  - 'elasticloadbalancing:Describe*'
                  - 'elasticloadbalancing:RegisterInstancesWithLoadBalancer'
                  - 'elasticloadbalancing:RegisterTargets'
                Resource: '*'

  # This is a role that's used by container payload
  TaskRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: [ecs-tasks.amazonaws.com]
            Action: ['sts:AssumeRole']
      Path: /
      Policies:
        - PolicyName: !Join ['-', [!Ref 'AWS::StackName', 's3-write']]
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  # Allow ECS task to upload new objects
                  - 's3:PutObject'
                  - 's3:PutObjectAcl'
                Resource: !Join ['', [!GetAtt 'S3Bucket.Arn', '/*']]

  # This is a role which is used by the ECS agent
  ECSTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: [ecs-tasks.amazonaws.com]
            Action: ['sts:AssumeRole']
      Path: /
      Policies:
        - PolicyName: AmazonECSTaskExecutionRolePolicy
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  # Allow the ECS Tasks to download images from ECR
                  - 'ecr:GetAuthorizationToken'
                  - 'ecr:BatchCheckLayerAvailability'
                  - 'ecr:GetDownloadUrlForLayer'
                  - 'ecr:BatchGetImage'

                  # Allow the ECS tasks to upload logs to CloudWatch
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource: '*'

  CloudWatchGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Join ['/', ['/ecs', !Ref 'AWS::StackName', 'logs']]
      RetentionInDays: 7

  EcsTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Ref 'ServiceName'
      NetworkMode: awsvpc
      Memory: !Ref 'TaskMemory'
      Cpu: !Ref 'TaskCpu'
      TaskRoleArn: !GetAtt 'TaskRole.Arn'
      ExecutionRoleArn: !GetAtt 'ECSTaskExecutionRole.Arn'
      RequiresCompatibilities:
        - FARGATE
      ContainerDefinitions:
        - Image: docker.io/mongo:4
          Essential: true
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref CloudWatchGroup
              awslogs-region: !Ref 'AWS::Region'
              awslogs-stream-prefix: ecs
          Environment:
            - Name: MONGO_INITDB_ROOT_PASSWORD
              Value: labs-starter-ecs
            - Name: MONGO_INITDB_ROOT_USERNAME
              Value: labs-starter-ecs
          Name: mongo

        - Image: '#{AWS::AccountId}.dkr.ecr.#{AWS::Region}.amazonaws.com/#{ImageUrl}:api-${self:provider.stage}-latest'
          PortMappings:
            - ContainerPort: 8000
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref CloudWatchGroup
              awslogs-region: !Ref 'AWS::Region'
              awslogs-stream-prefix: ${self:custom.config.prefixes.appName}-ecs
          Environment:
            - Name: MONGODB_DATABASE
              Value: labs-starter-ecs
            - Name: MONGODB_URI
              Value: mongodb://labs-starter-ecs:labs-starter-ecs@127.0.0.1:27017
          Name: api


  # The service. The service is a resource which allows you to run multiple
  # copies of a type of task, and gather up their logs and metrics, as well
  # as monitor the number of running tasks and replace any that have crashed
  EcsService:
    Type: AWS::ECS::Service
    DependsOn:
      - EcsTaskDefinition
      - LoadBalancerRuleAPI
    Properties:
      ServiceName: !Join ['-', [!Ref 'AWS::StackName', 'ecs-service']]
      Cluster: !Ref 'ECSCluster'
      LaunchType: FARGATE
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 100
      DesiredCount: 1
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups:
            - !Ref 'FargateContainerSecurityGroup'
          Subnets:
            - !Ref 'PublicSubnetOne'
            - !Ref 'PublicSubnetTwo'
      TaskDefinition: !Ref 'EcsTaskDefinition'
      LoadBalancers:
        - ContainerName: api
          ContainerPort: 8000
          TargetGroupArn: !Ref 'TargetGroupAPI'

# These are the values output by the CloudFormation template. Be careful
# about changing any of them, because of them are exported with specific
# names so that the other task related CF templates can use them.
Outputs:
  apiUrl:
    Description: apiUrl
    Value: !Join ['', ['http://', !GetAtt 'PublicLoadBalancer.DNSName', '/graphql']]
    Export:
      Name: !Join [':', [!Ref 'AWS::StackName', 'apiUrl']]
