{
  "service": {
    "service": "labs-user-service",
    "serviceObject": {
      "name": "labs-user-service"
    },
    "provider": {
      "name": "aws",
      "runtime": "nodejs12.x",
      "memorySize": 384,
      "timeout": 10,
      "stage": "develop",
      "region": "eu-west-3",
      "lambdaHashingVersion": "20201221",
      "environment": {
        "STAGE": "develop",
        "MONGO_URL": "mongodb+srv://labs_dev:DS8dyoDErKFyelMA@cluster2.efnmf.mongodb.net/develop_labs_db_one?retryWrites=true&w=majority"
      },
      "variableSyntax": "\\${([^{}:]+?(?:\\(|:)(?:[^:{}][^{}]*?)?)}",
      "versionFunctions": true,
      "compiledCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "ServerlessDeploymentBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
              "BucketEncryption": {
                "ServerSideEncryptionConfiguration": [
                  {
                    "ServerSideEncryptionByDefault": {
                      "SSEAlgorithm": "AES256"
                    }
                  }
                ]
              }
            }
          },
          "ServerlessDeploymentBucketPolicy": {
            "Type": "AWS::S3::BucketPolicy",
            "Properties": {
              "Bucket": {
                "Ref": "ServerlessDeploymentBucket"
              },
              "PolicyDocument": {
                "Statement": [
                  {
                    "Action": "s3:*",
                    "Effect": "Deny",
                    "Principal": "*",
                    "Resource": [
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            },
                            "/*"
                          ]
                        ]
                      },
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            }
                          ]
                        ]
                      }
                    ],
                    "Condition": {
                      "Bool": {
                        "aws:SecureTransport": false
                      }
                    }
                  }
                ]
              }
            }
          },
          "ECSCluster": {
            "Type": "AWS::ECS::Cluster"
          },
          "FargateContainerSecurityGroup": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
              "VpcId": {
                "Ref": "VPC"
              },
              "GroupName": {
                "Fn::Join": [
                  ":",
                  [
                    {
                      "Ref": "AWS::StackName"
                    },
                    "fargate-sg"
                  ]
                ]
              },
              "GroupDescription": "Access to the Fargate containers"
            }
          },
          "PublicLoadBalancerSG": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
              "VpcId": {
                "Ref": "VPC"
              },
              "GroupName": {
                "Fn::Join": [
                  ":",
                  [
                    {
                      "Ref": "AWS::StackName"
                    },
                    "load-balancer-sg"
                  ]
                ]
              },
              "GroupDescription": "Access to the public facing load balancer",
              "SecurityGroupIngress": [
                {
                  "CidrIp": "0.0.0.0/0",
                  "IpProtocol": -1
                }
              ]
            }
          },
          "EcsSecurityGroupIngressFromPublicALB": {
            "Type": "AWS::EC2::SecurityGroupIngress",
            "Properties": {
              "Description": "Ingress from the public ALB",
              "GroupId": {
                "Ref": "FargateContainerSecurityGroup"
              },
              "IpProtocol": -1,
              "SourceSecurityGroupId": {
                "Ref": "PublicLoadBalancerSG"
              }
            }
          },
          "EcsSecurityGroupIngressFromSelf": {
            "Type": "AWS::EC2::SecurityGroupIngress",
            "Properties": {
              "Description": "Ingress from other containers in the same security group",
              "GroupId": {
                "Ref": "FargateContainerSecurityGroup"
              },
              "IpProtocol": -1,
              "SourceSecurityGroupId": {
                "Ref": "FargateContainerSecurityGroup"
              }
            }
          },
          "PublicLoadBalancer": {
            "Type": "AWS::ElasticLoadBalancingV2::LoadBalancer",
            "Properties": {
              "Name": {
                "Ref": "AWS::StackName"
              },
              "Scheme": "internet-facing",
              "LoadBalancerAttributes": [
                {
                  "Key": "idle_timeout.timeout_seconds",
                  "Value": "30"
                }
              ],
              "Subnets": [
                {
                  "Ref": "PublicSubnetOne"
                },
                {
                  "Ref": "PublicSubnetTwo"
                }
              ],
              "SecurityGroups": [
                {
                  "Ref": "PublicLoadBalancerSG"
                }
              ]
            }
          },
          "PublicLoadBalancerListener": {
            "Type": "AWS::ElasticLoadBalancingV2::Listener",
            "DependsOn": [
              "PublicLoadBalancer"
            ],
            "Properties": {
              "DefaultActions": [
                {
                  "TargetGroupArn": {
                    "Ref": "TargetGroupAPI"
                  },
                  "Type": "forward"
                }
              ],
              "LoadBalancerArn": {
                "Ref": "PublicLoadBalancer"
              },
              "Port": 8000,
              "Protocol": "HTTP"
            }
          },
          "TargetGroupAPI": {
            "Type": "AWS::ElasticLoadBalancingV2::TargetGroup",
            "Properties": {
              "HealthCheckIntervalSeconds": 6,
              "HealthCheckPath": "/",
              "HealthCheckProtocol": "HTTP",
              "HealthCheckTimeoutSeconds": 5,
              "HealthyThresholdCount": 2,
              "TargetType": "ip",
              "Name": {
                "Fn::Join": [
                  "-",
                  [
                    {
                      "Ref": "AWS::StackName"
                    },
                    "api-tg"
                  ]
                ]
              },
              "Port": 8000,
              "Matcher": {
                "HttpCode": 400
              },
              "Protocol": "HTTP",
              "UnhealthyThresholdCount": 2,
              "VpcId": {
                "Ref": "VPC"
              }
            }
          },
          "LoadBalancerRuleAPI": {
            "Type": "AWS::ElasticLoadBalancingV2::ListenerRule",
            "Properties": {
              "Actions": [
                {
                  "TargetGroupArn": {
                    "Ref": "TargetGroupAPI"
                  },
                  "Type": "forward"
                }
              ],
              "Conditions": [
                {
                  "Field": "path-pattern",
                  "Values": [
                    "/graphql"
                  ]
                }
              ],
              "ListenerArn": {
                "Ref": "PublicLoadBalancerListener"
              },
              "Priority": 2
            }
          },
          "ECSRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
              "AssumeRolePolicyDocument": {
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "Service": [
                        "ecs.amazonaws.com"
                      ]
                    },
                    "Action": [
                      "sts:AssumeRole"
                    ]
                  }
                ]
              },
              "Path": "/",
              "Policies": [
                {
                  "PolicyName": "ecs-service",
                  "PolicyDocument": {
                    "Statement": [
                      {
                        "Effect": "Allow",
                        "Action": [
                          "ec2:AttachNetworkInterface",
                          "ec2:CreateNetworkInterface",
                          "ec2:CreateNetworkInterfacePermission",
                          "ec2:DeleteNetworkInterface",
                          "ec2:DeleteNetworkInterfacePermission",
                          "ec2:Describe*",
                          "ec2:DetachNetworkInterface",
                          "elasticloadbalancing:DeregisterInstancesFromLoadBalancer",
                          "elasticloadbalancing:DeregisterTargets",
                          "elasticloadbalancing:Describe*",
                          "elasticloadbalancing:RegisterInstancesWithLoadBalancer",
                          "elasticloadbalancing:RegisterTargets"
                        ],
                        "Resource": "*"
                      }
                    ]
                  }
                }
              ]
            }
          },
          "TaskRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
              "AssumeRolePolicyDocument": {
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "Service": [
                        "ecs-tasks.amazonaws.com"
                      ]
                    },
                    "Action": [
                      "sts:AssumeRole"
                    ]
                  }
                ]
              },
              "Path": "/",
              "Policies": [
                {
                  "PolicyName": {
                    "Fn::Join": [
                      "-",
                      [
                        {
                          "Ref": "AWS::StackName"
                        },
                        "s3-write"
                      ]
                    ]
                  },
                  "PolicyDocument": {
                    "Statement": [
                      {
                        "Effect": "Allow",
                        "Action": [
                          "s3:PutObject",
                          "s3:PutObjectAcl"
                        ],
                        "Resource": {
                          "Fn::Join": [
                            "",
                            [
                              {
                                "Fn::GetAtt": [
                                  "S3Bucket",
                                  "Arn"
                                ]
                              },
                              "/*"
                            ]
                          ]
                        }
                      }
                    ]
                  }
                }
              ]
            }
          },
          "ECSTaskExecutionRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
              "AssumeRolePolicyDocument": {
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "Service": [
                        "ecs-tasks.amazonaws.com"
                      ]
                    },
                    "Action": [
                      "sts:AssumeRole"
                    ]
                  }
                ]
              },
              "Path": "/",
              "Policies": [
                {
                  "PolicyName": "AmazonECSTaskExecutionRolePolicy",
                  "PolicyDocument": {
                    "Statement": [
                      {
                        "Effect": "Allow",
                        "Action": [
                          "ecr:GetAuthorizationToken",
                          "ecr:BatchCheckLayerAvailability",
                          "ecr:GetDownloadUrlForLayer",
                          "ecr:BatchGetImage",
                          "logs:CreateLogStream",
                          "logs:PutLogEvents"
                        ],
                        "Resource": "*"
                      }
                    ]
                  }
                }
              ]
            }
          },
          "CloudWatchGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": {
                "Fn::Join": [
                  "/",
                  [
                    "/ecs",
                    {
                      "Ref": "AWS::StackName"
                    },
                    "logs"
                  ]
                ]
              },
              "RetentionInDays": 7
            }
          },
          "EcsTaskDefinition": {
            "Type": "AWS::ECS::TaskDefinition",
            "Properties": {
              "Family": {
                "Ref": "ServiceName"
              },
              "NetworkMode": "awsvpc",
              "Memory": {
                "Ref": "TaskMemory"
              },
              "Cpu": {
                "Ref": "TaskCpu"
              },
              "TaskRoleArn": {
                "Fn::GetAtt": [
                  "TaskRole",
                  "Arn"
                ]
              },
              "ExecutionRoleArn": {
                "Fn::GetAtt": [
                  "ECSTaskExecutionRole",
                  "Arn"
                ]
              },
              "RequiresCompatibilities": [
                "FARGATE"
              ],
              "ContainerDefinitions": [
                {
                  "Image": "docker.io/mongo:4",
                  "Essential": true,
                  "LogConfiguration": {
                    "LogDriver": "awslogs",
                    "Options": {
                      "awslogs-group": {
                        "Ref": "CloudWatchGroup"
                      },
                      "awslogs-region": {
                        "Ref": "AWS::Region"
                      },
                      "awslogs-stream-prefix": "ecs"
                    }
                  },
                  "Environment": [
                    {
                      "Name": "MONGO_INITDB_ROOT_PASSWORD",
                      "Value": "labs-starter-ecs"
                    },
                    {
                      "Name": "MONGO_INITDB_ROOT_USERNAME",
                      "Value": "labs-starter-ecs"
                    }
                  ],
                  "Name": "mongo"
                },
                {
                  "Image": "#{AWS::AccountId}.dkr.ecr.#{AWS::Region}.amazonaws.com/#{ImageUrl}:api-develop-latest",
                  "PortMappings": [
                    {
                      "ContainerPort": 8000
                    }
                  ],
                  "LogConfiguration": {
                    "LogDriver": "awslogs",
                    "Options": {
                      "awslogs-group": {
                        "Ref": "CloudWatchGroup"
                      },
                      "awslogs-region": {
                        "Ref": "AWS::Region"
                      },
                      "awslogs-stream-prefix": "labs-ecs"
                    }
                  },
                  "Environment": [
                    {
                      "Name": "MONGODB_DATABASE",
                      "Value": "labs-starter-ecs"
                    },
                    {
                      "Name": "MONGODB_URI",
                      "Value": "mongodb://labs-starter-ecs:labs-starter-ecs@127.0.0.1:27017"
                    }
                  ],
                  "Name": "api"
                }
              ]
            }
          },
          "EcsService": {
            "Type": "AWS::ECS::Service",
            "DependsOn": [
              "EcsTaskDefinition",
              "LoadBalancerRuleAPI"
            ],
            "Properties": {
              "ServiceName": {
                "Fn::Join": [
                  "-",
                  [
                    {
                      "Ref": "AWS::StackName"
                    },
                    "ecs-service"
                  ]
                ]
              },
              "Cluster": {
                "Ref": "ECSCluster"
              },
              "LaunchType": "FARGATE",
              "DeploymentConfiguration": {
                "MaximumPercent": 200,
                "MinimumHealthyPercent": 100
              },
              "DesiredCount": 1,
              "NetworkConfiguration": {
                "AwsvpcConfiguration": {
                  "AssignPublicIp": "ENABLED",
                  "SecurityGroups": [
                    {
                      "Ref": "FargateContainerSecurityGroup"
                    }
                  ],
                  "Subnets": [
                    {
                      "Ref": "PublicSubnetOne"
                    },
                    {
                      "Ref": "PublicSubnetTwo"
                    }
                  ]
                }
              },
              "TaskDefinition": {
                "Ref": "EcsTaskDefinition"
              },
              "LoadBalancers": [
                {
                  "ContainerName": "api",
                  "ContainerPort": 8000,
                  "TargetGroupArn": {
                    "Ref": "TargetGroupAPI"
                  }
                }
              ]
            }
          },
          "VPC": {
            "Type": "AWS::EC2::VPC",
            "Properties": {
              "EnableDnsSupport": true,
              "EnableDnsHostnames": true,
              "CidrBlock": {
                "Fn::FindInMap": [
                  "SubnetConfig",
                  "VPC",
                  "CIDR"
                ]
              }
            }
          },
          "PublicSubnetOne": {
            "Type": "AWS::EC2::Subnet",
            "Properties": {
              "AvailabilityZone": {
                "Fn::Select": [
                  0,
                  {
                    "Fn::GetAZs": {
                      "Ref": "AWS::Region"
                    }
                  }
                ]
              },
              "VpcId": {
                "Ref": "VPC"
              },
              "CidrBlock": {
                "Fn::FindInMap": [
                  "SubnetConfig",
                  "PublicOne",
                  "CIDR"
                ]
              },
              "MapPublicIpOnLaunch": true
            }
          },
          "PublicSubnetTwo": {
            "Type": "AWS::EC2::Subnet",
            "Properties": {
              "AvailabilityZone": {
                "Fn::Select": [
                  1,
                  {
                    "Fn::GetAZs": {
                      "Ref": "AWS::Region"
                    }
                  }
                ]
              },
              "VpcId": {
                "Ref": "VPC"
              },
              "CidrBlock": {
                "Fn::FindInMap": [
                  "SubnetConfig",
                  "PublicTwo",
                  "CIDR"
                ]
              },
              "MapPublicIpOnLaunch": true
            }
          },
          "InternetGateway": {
            "Type": "AWS::EC2::InternetGateway"
          },
          "GatewayAttachement": {
            "Type": "AWS::EC2::VPCGatewayAttachment",
            "Properties": {
              "VpcId": {
                "Ref": "VPC"
              },
              "InternetGatewayId": {
                "Ref": "InternetGateway"
              }
            }
          },
          "PublicRouteTable": {
            "Type": "AWS::EC2::RouteTable",
            "Properties": {
              "VpcId": {
                "Ref": "VPC"
              }
            }
          },
          "PublicRoute": {
            "Type": "AWS::EC2::Route",
            "DependsOn": [
              "GatewayAttachement"
            ],
            "Properties": {
              "RouteTableId": {
                "Ref": "PublicRouteTable"
              },
              "DestinationCidrBlock": "0.0.0.0/0",
              "GatewayId": {
                "Ref": "InternetGateway"
              }
            }
          },
          "PublicSubnetOneRouteTableAssociation": {
            "Type": "AWS::EC2::SubnetRouteTableAssociation",
            "Properties": {
              "SubnetId": {
                "Ref": "PublicSubnetOne"
              },
              "RouteTableId": {
                "Ref": "PublicRouteTable"
              }
            }
          },
          "PublicSubnetTwoRouteTableAssociation": {
            "Type": "AWS::EC2::SubnetRouteTableAssociation",
            "Properties": {
              "SubnetId": {
                "Ref": "PublicSubnetTwo"
              },
              "RouteTableId": {
                "Ref": "PublicRouteTable"
              }
            }
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": {
              "Ref": "ServerlessDeploymentBucket"
            }
          },
          "apiUrl": {
            "Description": "apiUrl",
            "Value": {
              "Fn::Join": [
                "",
                [
                  "http://",
                  {
                    "Fn::GetAtt": [
                      "PublicLoadBalancer",
                      "DNSName"
                    ]
                  },
                  "/graphql"
                ]
              ]
            },
            "Export": {
              "Name": {
                "Fn::Join": [
                  ":",
                  [
                    {
                      "Ref": "AWS::StackName"
                    },
                    "apiUrl"
                  ]
                ]
              }
            }
          }
        },
        "Parameters": {
          "StackName": {
            "Type": "String",
            "Default": "labs-user-service-unique",
            "Description": "The unique name of the service that you are creating."
          },
          "ImageUrl": {
            "Type": "String",
            "Default": "labs-starter-ecs",
            "Description": "The url of a docker image that contains the application process that will handle the traffic for this service"
          },
          "TaskCpu": {
            "Type": "Number",
            "Default": 1024,
            "Description": "How much CPU to give the task. 1024 is 1 CPU"
          },
          "TaskMemory": {
            "Type": "Number",
            "Default": 2048,
            "Description": "How much memory in megabytes to give the task"
          },
          "apiPort": {
            "Type": "Number",
            "Default": 8000,
            "Description": "What port number to use for accessing api service"
          }
        },
        "Mappings": {
          "SubnetConfig": {
            "VPC": {
              "CIDR": "10.0.0.0/16"
            },
            "PublicOne": {
              "CIDR": "10.0.0.0/24"
            },
            "PublicTwo": {
              "CIDR": "10.0.1.0/24"
            }
          }
        }
      },
      "coreCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "ServerlessDeploymentBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
              "BucketEncryption": {
                "ServerSideEncryptionConfiguration": [
                  {
                    "ServerSideEncryptionByDefault": {
                      "SSEAlgorithm": "AES256"
                    }
                  }
                ]
              }
            }
          },
          "ServerlessDeploymentBucketPolicy": {
            "Type": "AWS::S3::BucketPolicy",
            "Properties": {
              "Bucket": {
                "Ref": "ServerlessDeploymentBucket"
              },
              "PolicyDocument": {
                "Statement": [
                  {
                    "Action": "s3:*",
                    "Effect": "Deny",
                    "Principal": "*",
                    "Resource": [
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            },
                            "/*"
                          ]
                        ]
                      },
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            }
                          ]
                        ]
                      }
                    ],
                    "Condition": {
                      "Bool": {
                        "aws:SecureTransport": false
                      }
                    }
                  }
                ]
              }
            }
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": {
              "Ref": "ServerlessDeploymentBucket"
            }
          }
        }
      }
    },
    "custom": {
      "config": {
        "naming": "labs-user-service-develop",
        "nsDomain": "labs.freelances.io",
        "defaultRegions": "eu-west-3",
        "domainPrefixes": "develop.",
        "apiDomainName": "develop.api.labs.freelances.io",
        "siteDomainName": "develop.labs.freelances.io",
        "event-bridge-source": "labs-microservices.eventbridge",
        "environment": {
          "STAGE": "develop",
          "MONGO_URL": "mongodb+srv://labs_dev:DS8dyoDErKFyelMA@cluster2.efnmf.mongodb.net/develop_labs_db_one?retryWrites=true&w=majority",
          "FRONT_END_URL": "https://develop.labs.freelances.io"
        },
        "prefixes": {
          "appName": "labs",
          "arn": {
            "bucket": "arn:aws:s3:::"
          }
        }
      },
      "environment": {
        "AWS_NODEJS_CONNECTION_REUSE_ENABLED": 1
      }
    },
    "pluginsData": {},
    "functions": {},
    "resources": {
      "Parameters": {
        "StackName": {
          "Type": "String",
          "Default": "labs-user-service-unique",
          "Description": "The unique name of the service that you are creating."
        },
        "ImageUrl": {
          "Type": "String",
          "Default": "labs-starter-ecs",
          "Description": "The url of a docker image that contains the application process that will handle the traffic for this service"
        },
        "TaskCpu": {
          "Type": "Number",
          "Default": 1024,
          "Description": "How much CPU to give the task. 1024 is 1 CPU"
        },
        "TaskMemory": {
          "Type": "Number",
          "Default": 2048,
          "Description": "How much memory in megabytes to give the task"
        },
        "apiPort": {
          "Type": "Number",
          "Default": 8000,
          "Description": "What port number to use for accessing api service"
        }
      },
      "Resources": {
        "ECSCluster": {
          "Type": "AWS::ECS::Cluster"
        },
        "FargateContainerSecurityGroup": {
          "Type": "AWS::EC2::SecurityGroup",
          "Properties": {
            "VpcId": {
              "Ref": "VPC"
            },
            "GroupName": {
              "Fn::Join": [
                ":",
                [
                  {
                    "Ref": "AWS::StackName"
                  },
                  "fargate-sg"
                ]
              ]
            },
            "GroupDescription": "Access to the Fargate containers"
          }
        },
        "PublicLoadBalancerSG": {
          "Type": "AWS::EC2::SecurityGroup",
          "Properties": {
            "VpcId": {
              "Ref": "VPC"
            },
            "GroupName": {
              "Fn::Join": [
                ":",
                [
                  {
                    "Ref": "AWS::StackName"
                  },
                  "load-balancer-sg"
                ]
              ]
            },
            "GroupDescription": "Access to the public facing load balancer",
            "SecurityGroupIngress": [
              {
                "CidrIp": "0.0.0.0/0",
                "IpProtocol": -1
              }
            ]
          }
        },
        "EcsSecurityGroupIngressFromPublicALB": {
          "Type": "AWS::EC2::SecurityGroupIngress",
          "Properties": {
            "Description": "Ingress from the public ALB",
            "GroupId": {
              "Ref": "FargateContainerSecurityGroup"
            },
            "IpProtocol": -1,
            "SourceSecurityGroupId": {
              "Ref": "PublicLoadBalancerSG"
            }
          }
        },
        "EcsSecurityGroupIngressFromSelf": {
          "Type": "AWS::EC2::SecurityGroupIngress",
          "Properties": {
            "Description": "Ingress from other containers in the same security group",
            "GroupId": {
              "Ref": "FargateContainerSecurityGroup"
            },
            "IpProtocol": -1,
            "SourceSecurityGroupId": {
              "Ref": "FargateContainerSecurityGroup"
            }
          }
        },
        "PublicLoadBalancer": {
          "Type": "AWS::ElasticLoadBalancingV2::LoadBalancer",
          "Properties": {
            "Name": {
              "Ref": "AWS::StackName"
            },
            "Scheme": "internet-facing",
            "LoadBalancerAttributes": [
              {
                "Key": "idle_timeout.timeout_seconds",
                "Value": "30"
              }
            ],
            "Subnets": [
              {
                "Ref": "PublicSubnetOne"
              },
              {
                "Ref": "PublicSubnetTwo"
              }
            ],
            "SecurityGroups": [
              {
                "Ref": "PublicLoadBalancerSG"
              }
            ]
          }
        },
        "PublicLoadBalancerListener": {
          "Type": "AWS::ElasticLoadBalancingV2::Listener",
          "DependsOn": [
            "PublicLoadBalancer"
          ],
          "Properties": {
            "DefaultActions": [
              {
                "TargetGroupArn": {
                  "Ref": "TargetGroupAPI"
                },
                "Type": "forward"
              }
            ],
            "LoadBalancerArn": {
              "Ref": "PublicLoadBalancer"
            },
            "Port": 8000,
            "Protocol": "HTTP"
          }
        },
        "TargetGroupAPI": {
          "Type": "AWS::ElasticLoadBalancingV2::TargetGroup",
          "Properties": {
            "HealthCheckIntervalSeconds": 6,
            "HealthCheckPath": "/",
            "HealthCheckProtocol": "HTTP",
            "HealthCheckTimeoutSeconds": 5,
            "HealthyThresholdCount": 2,
            "TargetType": "ip",
            "Name": {
              "Fn::Join": [
                "-",
                [
                  {
                    "Ref": "AWS::StackName"
                  },
                  "api-tg"
                ]
              ]
            },
            "Port": 8000,
            "Matcher": {
              "HttpCode": 400
            },
            "Protocol": "HTTP",
            "UnhealthyThresholdCount": 2,
            "VpcId": {
              "Ref": "VPC"
            }
          }
        },
        "LoadBalancerRuleAPI": {
          "Type": "AWS::ElasticLoadBalancingV2::ListenerRule",
          "Properties": {
            "Actions": [
              {
                "TargetGroupArn": {
                  "Ref": "TargetGroupAPI"
                },
                "Type": "forward"
              }
            ],
            "Conditions": [
              {
                "Field": "path-pattern",
                "Values": [
                  "/graphql"
                ]
              }
            ],
            "ListenerArn": {
              "Ref": "PublicLoadBalancerListener"
            },
            "Priority": 2
          }
        },
        "ECSRole": {
          "Type": "AWS::IAM::Role",
          "Properties": {
            "AssumeRolePolicyDocument": {
              "Statement": [
                {
                  "Effect": "Allow",
                  "Principal": {
                    "Service": [
                      "ecs.amazonaws.com"
                    ]
                  },
                  "Action": [
                    "sts:AssumeRole"
                  ]
                }
              ]
            },
            "Path": "/",
            "Policies": [
              {
                "PolicyName": "ecs-service",
                "PolicyDocument": {
                  "Statement": [
                    {
                      "Effect": "Allow",
                      "Action": [
                        "ec2:AttachNetworkInterface",
                        "ec2:CreateNetworkInterface",
                        "ec2:CreateNetworkInterfacePermission",
                        "ec2:DeleteNetworkInterface",
                        "ec2:DeleteNetworkInterfacePermission",
                        "ec2:Describe*",
                        "ec2:DetachNetworkInterface",
                        "elasticloadbalancing:DeregisterInstancesFromLoadBalancer",
                        "elasticloadbalancing:DeregisterTargets",
                        "elasticloadbalancing:Describe*",
                        "elasticloadbalancing:RegisterInstancesWithLoadBalancer",
                        "elasticloadbalancing:RegisterTargets"
                      ],
                      "Resource": "*"
                    }
                  ]
                }
              }
            ]
          }
        },
        "TaskRole": {
          "Type": "AWS::IAM::Role",
          "Properties": {
            "AssumeRolePolicyDocument": {
              "Statement": [
                {
                  "Effect": "Allow",
                  "Principal": {
                    "Service": [
                      "ecs-tasks.amazonaws.com"
                    ]
                  },
                  "Action": [
                    "sts:AssumeRole"
                  ]
                }
              ]
            },
            "Path": "/",
            "Policies": [
              {
                "PolicyName": {
                  "Fn::Join": [
                    "-",
                    [
                      {
                        "Ref": "AWS::StackName"
                      },
                      "s3-write"
                    ]
                  ]
                },
                "PolicyDocument": {
                  "Statement": [
                    {
                      "Effect": "Allow",
                      "Action": [
                        "s3:PutObject",
                        "s3:PutObjectAcl"
                      ],
                      "Resource": {
                        "Fn::Join": [
                          "",
                          [
                            {
                              "Fn::GetAtt": [
                                "S3Bucket",
                                "Arn"
                              ]
                            },
                            "/*"
                          ]
                        ]
                      }
                    }
                  ]
                }
              }
            ]
          }
        },
        "ECSTaskExecutionRole": {
          "Type": "AWS::IAM::Role",
          "Properties": {
            "AssumeRolePolicyDocument": {
              "Statement": [
                {
                  "Effect": "Allow",
                  "Principal": {
                    "Service": [
                      "ecs-tasks.amazonaws.com"
                    ]
                  },
                  "Action": [
                    "sts:AssumeRole"
                  ]
                }
              ]
            },
            "Path": "/",
            "Policies": [
              {
                "PolicyName": "AmazonECSTaskExecutionRolePolicy",
                "PolicyDocument": {
                  "Statement": [
                    {
                      "Effect": "Allow",
                      "Action": [
                        "ecr:GetAuthorizationToken",
                        "ecr:BatchCheckLayerAvailability",
                        "ecr:GetDownloadUrlForLayer",
                        "ecr:BatchGetImage",
                        "logs:CreateLogStream",
                        "logs:PutLogEvents"
                      ],
                      "Resource": "*"
                    }
                  ]
                }
              }
            ]
          }
        },
        "CloudWatchGroup": {
          "Type": "AWS::Logs::LogGroup",
          "Properties": {
            "LogGroupName": {
              "Fn::Join": [
                "/",
                [
                  "/ecs",
                  {
                    "Ref": "AWS::StackName"
                  },
                  "logs"
                ]
              ]
            },
            "RetentionInDays": 7
          }
        },
        "EcsTaskDefinition": {
          "Type": "AWS::ECS::TaskDefinition",
          "Properties": {
            "Family": {
              "Ref": "ServiceName"
            },
            "NetworkMode": "awsvpc",
            "Memory": {
              "Ref": "TaskMemory"
            },
            "Cpu": {
              "Ref": "TaskCpu"
            },
            "TaskRoleArn": {
              "Fn::GetAtt": [
                "TaskRole",
                "Arn"
              ]
            },
            "ExecutionRoleArn": {
              "Fn::GetAtt": [
                "ECSTaskExecutionRole",
                "Arn"
              ]
            },
            "RequiresCompatibilities": [
              "FARGATE"
            ],
            "ContainerDefinitions": [
              {
                "Image": "docker.io/mongo:4",
                "Essential": true,
                "LogConfiguration": {
                  "LogDriver": "awslogs",
                  "Options": {
                    "awslogs-group": {
                      "Ref": "CloudWatchGroup"
                    },
                    "awslogs-region": {
                      "Ref": "AWS::Region"
                    },
                    "awslogs-stream-prefix": "ecs"
                  }
                },
                "Environment": [
                  {
                    "Name": "MONGO_INITDB_ROOT_PASSWORD",
                    "Value": "labs-starter-ecs"
                  },
                  {
                    "Name": "MONGO_INITDB_ROOT_USERNAME",
                    "Value": "labs-starter-ecs"
                  }
                ],
                "Name": "mongo"
              },
              {
                "Image": "#{AWS::AccountId}.dkr.ecr.#{AWS::Region}.amazonaws.com/#{ImageUrl}:api-develop-latest",
                "PortMappings": [
                  {
                    "ContainerPort": 8000
                  }
                ],
                "LogConfiguration": {
                  "LogDriver": "awslogs",
                  "Options": {
                    "awslogs-group": {
                      "Ref": "CloudWatchGroup"
                    },
                    "awslogs-region": {
                      "Ref": "AWS::Region"
                    },
                    "awslogs-stream-prefix": "labs-ecs"
                  }
                },
                "Environment": [
                  {
                    "Name": "MONGODB_DATABASE",
                    "Value": "labs-starter-ecs"
                  },
                  {
                    "Name": "MONGODB_URI",
                    "Value": "mongodb://labs-starter-ecs:labs-starter-ecs@127.0.0.1:27017"
                  }
                ],
                "Name": "api"
              }
            ]
          }
        },
        "EcsService": {
          "Type": "AWS::ECS::Service",
          "DependsOn": [
            "EcsTaskDefinition",
            "LoadBalancerRuleAPI"
          ],
          "Properties": {
            "ServiceName": {
              "Fn::Join": [
                "-",
                [
                  {
                    "Ref": "AWS::StackName"
                  },
                  "ecs-service"
                ]
              ]
            },
            "Cluster": {
              "Ref": "ECSCluster"
            },
            "LaunchType": "FARGATE",
            "DeploymentConfiguration": {
              "MaximumPercent": 200,
              "MinimumHealthyPercent": 100
            },
            "DesiredCount": 1,
            "NetworkConfiguration": {
              "AwsvpcConfiguration": {
                "AssignPublicIp": "ENABLED",
                "SecurityGroups": [
                  {
                    "Ref": "FargateContainerSecurityGroup"
                  }
                ],
                "Subnets": [
                  {
                    "Ref": "PublicSubnetOne"
                  },
                  {
                    "Ref": "PublicSubnetTwo"
                  }
                ]
              }
            },
            "TaskDefinition": {
              "Ref": "EcsTaskDefinition"
            },
            "LoadBalancers": [
              {
                "ContainerName": "api",
                "ContainerPort": 8000,
                "TargetGroupArn": {
                  "Ref": "TargetGroupAPI"
                }
              }
            ]
          }
        },
        "VPC": {
          "Type": "AWS::EC2::VPC",
          "Properties": {
            "EnableDnsSupport": true,
            "EnableDnsHostnames": true,
            "CidrBlock": {
              "Fn::FindInMap": [
                "SubnetConfig",
                "VPC",
                "CIDR"
              ]
            }
          }
        },
        "PublicSubnetOne": {
          "Type": "AWS::EC2::Subnet",
          "Properties": {
            "AvailabilityZone": {
              "Fn::Select": [
                0,
                {
                  "Fn::GetAZs": {
                    "Ref": "AWS::Region"
                  }
                }
              ]
            },
            "VpcId": {
              "Ref": "VPC"
            },
            "CidrBlock": {
              "Fn::FindInMap": [
                "SubnetConfig",
                "PublicOne",
                "CIDR"
              ]
            },
            "MapPublicIpOnLaunch": true
          }
        },
        "PublicSubnetTwo": {
          "Type": "AWS::EC2::Subnet",
          "Properties": {
            "AvailabilityZone": {
              "Fn::Select": [
                1,
                {
                  "Fn::GetAZs": {
                    "Ref": "AWS::Region"
                  }
                }
              ]
            },
            "VpcId": {
              "Ref": "VPC"
            },
            "CidrBlock": {
              "Fn::FindInMap": [
                "SubnetConfig",
                "PublicTwo",
                "CIDR"
              ]
            },
            "MapPublicIpOnLaunch": true
          }
        },
        "InternetGateway": {
          "Type": "AWS::EC2::InternetGateway"
        },
        "GatewayAttachement": {
          "Type": "AWS::EC2::VPCGatewayAttachment",
          "Properties": {
            "VpcId": {
              "Ref": "VPC"
            },
            "InternetGatewayId": {
              "Ref": "InternetGateway"
            }
          }
        },
        "PublicRouteTable": {
          "Type": "AWS::EC2::RouteTable",
          "Properties": {
            "VpcId": {
              "Ref": "VPC"
            }
          }
        },
        "PublicRoute": {
          "Type": "AWS::EC2::Route",
          "DependsOn": [
            "GatewayAttachement"
          ],
          "Properties": {
            "RouteTableId": {
              "Ref": "PublicRouteTable"
            },
            "DestinationCidrBlock": "0.0.0.0/0",
            "GatewayId": {
              "Ref": "InternetGateway"
            }
          }
        },
        "PublicSubnetOneRouteTableAssociation": {
          "Type": "AWS::EC2::SubnetRouteTableAssociation",
          "Properties": {
            "SubnetId": {
              "Ref": "PublicSubnetOne"
            },
            "RouteTableId": {
              "Ref": "PublicRouteTable"
            }
          }
        },
        "PublicSubnetTwoRouteTableAssociation": {
          "Type": "AWS::EC2::SubnetRouteTableAssociation",
          "Properties": {
            "SubnetId": {
              "Ref": "PublicSubnetTwo"
            },
            "RouteTableId": {
              "Ref": "PublicRouteTable"
            }
          }
        }
      },
      "Outputs": {
        "apiUrl": {
          "Description": "apiUrl",
          "Value": {
            "Fn::Join": [
              "",
              [
                "http://",
                {
                  "Fn::GetAtt": [
                    "PublicLoadBalancer",
                    "DNSName"
                  ]
                },
                "/graphql"
              ]
            ]
          },
          "Export": {
            "Name": {
              "Fn::Join": [
                ":",
                [
                  {
                    "Ref": "AWS::StackName"
                  },
                  "apiUrl"
                ]
              ]
            }
          }
        }
      },
      "Mappings": {
        "SubnetConfig": {
          "VPC": {
            "CIDR": "10.0.0.0/16"
          },
          "PublicOne": {
            "CIDR": "10.0.0.0/24"
          },
          "PublicTwo": {
            "CIDR": "10.0.1.0/24"
          }
        }
      }
    },
    "configValidationMode": "warn",
    "serviceFilename": "serverless.yml",
    "layers": {},
    "initialServerlessConfig": {
      "service": {
        "$ref": "$[\"service\"][\"serviceObject\"]"
      },
      "provider": {
        "$ref": "$[\"service\"][\"provider\"]"
      },
      "custom": {
        "$ref": "$[\"service\"][\"custom\"]"
      },
      "resources": {
        "$ref": "$[\"service\"][\"resources\"]"
      }
    },
    "isDashboardMonitoringPreconfigured": false
  },
  "package": {
    "artifactDirectoryName": "serverless/labs-user-service/develop/1619181494035-2021-04-23T12:38:14.035Z",
    "artifact": ""
  }
}